---
description: TypeScript and NestJS Guidelines
globs: *.ts
alwaysApply: false
---
# TypeScript and NestJS Guidelines

## TypeScript General Guidelines

### Basic Principles

- Use **English** for all code and documentation.
- Always declare the **type** of each variable and function (parameters and return value).
  - **Avoid** using `any`.
  - Create **necessary types**.
- Use **JSDoc** to document public classes and methods.
- **Don't leave blank lines** within a function.
- **One export per file**.

### Nomenclature

- Use **PascalCase** for classes.
- Use **camelCase** for variables, functions, and methods.
- Use **kebab-case** for file and directory names.
- Use **UPPERCASE** for environment variables.
- Avoid **magic numbers** and define constants.
- Start each function with a **verb**.
- Use **verbs** for boolean variables (e.g., `isLoading`, `hasError`, `canDelete`).
- Use **complete words** instead of abbreviations and correct spelling.
  - Except for standard abbreviations like **API, URL, etc.**
  - Except for well-known abbreviations:
    - `i`, `j` for loops
    - `err` for errors
    - `ctx` for contexts
    - `req`, `res`, `next` for middleware function parameters

### Functions

- Applies to both **functions** and **methods**.
- Write **short functions** with a **single purpose** (less than 20 instructions).
- Name functions with a **verb + something else**.
  - If it returns a boolean, use `isX`, `hasX`, `canX`, etc.
  - If it doesn't return anything, use `executeX`, `saveX`, etc.
- Avoid **nesting blocks**:
  - **Early checks and returns**.
  - **Extraction to utility functions**.
- Use **higher-order functions** (`map`, `filter`, `reduce`, etc.) to avoid function nesting.
- Use **arrow functions** for **simple functions** (less than 3 instructions).
- Use **named functions** for **non-simple functions**.
- Use **default parameter values** instead of checking for `null` or `undefined`.
- Reduce function parameters using **RO-RO** (Receive an Object, Return an Object):
  - **Use an object** to pass multiple parameters.
  - **Use an object** to return results.
  - **Declare necessary types** for input arguments and output.
- Use a **single level of abstraction**.

### Data Handling

- Don't abuse **primitive types**—encapsulate data in **composite types**.
- Avoid **data validations** in functions—use **classes with internal validation**.
- Prefer **immutability** for data.
  - Use **readonly** for data that doesn't change.
  - Use **as const** for literals that don't change.

### Classes

- Follow **SOLID** principles.
- Prefer **composition over inheritance**.
- Declare **interfaces** to define contracts.
- Write **small classes** with a **single purpose**:
  - **Less than 200 instructions**.
  - **Less than 10 public methods**.
  - **Less than 10 properties**.

### Exceptions

- Use **exceptions** to handle unexpected errors.
- If catching an exception, it should be to:
  - Fix an **expected problem**.
  - **Add context**.
  - Otherwise, use a **global handler**.

### Testing

- Follow the **Arrange-Act-Assert** convention for tests.
- Name **test variables clearly**:
  - Follow the convention: `inputX`, `mockX`, `actualX`, `expectedX`, etc.
- Write **unit tests** for each **public function**.
  - Use **test doubles** to simulate dependencies.
    - Except for **third-party dependencies** that are not expensive to execute.
- Write **acceptance tests** for each module.
  - Follow the **Given-When-Then** convention.

---

## NestJS-Specific Guidelines

### Basic Principles

- Use a **modular architecture**.
- Encapsulate the API in **modules**:
  - **One module per main domain/route**.
  - **One controller per route**.
  - Additional **controllers** for secondary routes.
  - A `schemas` folder inside the module for **data models**.
    - Example: `src/quiz-stats/schemas/question-stats.schema.ts`
  - DTOs validated with **Zod** (preferred) or `class-validator` for inputs.
  - Declare **simple types** for outputs.
  - A `services` module for **business logic and persistence**.
  - **Entities** with MikroORM for data persistence.
  - **One service per entity**.
- A **core module** for NestJS artifacts:
  - **Global filters** for exception handling.
  - **Global middlewares** for request management.
  - **Guards** for permission management.
  - **Interceptors** for request management.
- A **shared module** for services **shared between modules**:
  - **Utilities**.
  - **Shared business logic**.

### Validation (Zod)

- Use **Zod** for input validation instead of `class-validator`.
- Define **DTOs** using Zod schemas.
- Example:

```ts
import { z } from 'zod';

export const createQuestionStatsSchema = z.object({
  questionId: z.string().uuid(),
  correctAnswers: z.number().int().min(0),
  totalAttempts: z.number().int().min(1),
});

export type CreateQuestionStatsDto = z.infer<typeof createQuestionStatsSchema>;
```

- Use Zod’s validation inside controllers:

```ts
import { BadRequestException } from '@nestjs/common';
import { createQuestionStatsSchema } from '../schemas/question-stats.schema';

async function validateInput(input: unknown) {
  try {
    return createQuestionStatsSchema.parse(input);
  } catch (error) {
    throw new BadRequestException(error.errors);
  }
}
```

### Testing

- Use **Jest** as the testing framework.
- Write tests for each **controller** and **service**.
- Write **end-to-end tests** for each API module.
- Add an **admin/test** method to each controller as a smoke test.

